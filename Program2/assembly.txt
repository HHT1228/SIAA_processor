# R1: index
# R2: constant 60
# R3: LSW
# R4: MSW
# R5: branch register
# R6: ones
# R7: one_error_sign
# R8: LSW_new
# R9: MSW_new
# R10: parity_affected
# R11: temp

seti	30	# R0 = 30
set	R1	# R1 = 30 (index)
add	R1	# R0 = 60
set	R2	# R2 = 60 (range of index)

loop_start:
  lw	R1	# R0 = mem[index]
  set	R3	# R3 (LSW)
  seti	1	# R0 = 1
  add	R1	# R0 = index + 1
  lw	R0	# R0 = mem[index + 1]
  set	R4	# R4 (MSW)
  la	R3	# R0 = R3 (LSW)
  xor	R4	# R0 = R3 ^ R4 (LSW ^ MSW)
  rxor	R0	# R0 = ^R0
  set	R7	# R7 = ^R0 (one_error_sign)

  # p8 = ^(b11:b5)
  luta	15	# R0 = LUT[15] = 0b1111_1110
  and	R4	# R0 = R0 & R4 = MSW & 0b1111_1110
  rxor	R0	# R0 = ^R0
  set	R6	# R6 = R0 (ones)

  # affected parity analysis: p8
  seti	0	# R0 = 0
  set	R10	# R10 = 0 (parity_affected)
  seti	1	# R0 = 1
  and	R4	# R0 = R0 & R4 = MSW & 1 (parity_check)
  xor	R6	# R0 = parity_check = R0 ^ R6 = ones ^ parity_check
  sll	3	# R0 = (parity_check << 3)
  add	R10	# R0 = R0 + R10 = parity_affected + parity_check
  set	R10	# R10 = parity_affected = R0

  # p4 = ^(b11:b8,b4,b3,b2)
  luta	14	# R0 = LUT[14] = 0b1111_0000
  and	R4	# R0 = R0 & R4 = MSW & 0b1111_0000
  set	R9	# R9 = R0 (MSW_new)
  luta	12	# R0 = LUT[12] = 0b1110_0000
  and	R3	# R0 = R0 & R3 = LSW & 0b1110_0000 (LSW_new)
  xor	R9	# R0 = R0 ^ R9
  rxor	R0	# R0 = ^R0
  set	R6	# R6 = R0 (ones)

  # affected parity analysis: p4
  seti	0b0001_0000	# R0 = 0b0001_0000
  and	R3	# R0 = R0 & R3 (LSW) (parity_check)
  srl	4	# R0 = (parity_check >> 4)
  xor	R6	# R0 = parity_check = R0 ^ R6 = ones ^ parity_check
  sll	2	# R0 = (parity_check << 2)
  add	R10	# R0 = R0 + R10 = parity_affected + parity_check
  set	R10	# R10 = parity_affected = R0

  # p2 = ^(b11,b10,b7,b6,b4,b3,b1)
  luta	11	# R0 = LUT[11] = 0b1100_1100
  and	R4	# R0 = R0 & R4 = MSW & 0b1100_1100
  set	R9	# R9 = R0 (MSW_new)
  luta	10	# R0 = LUT[10] = 0b1100_1000
  and	R3	# R0 = R0 & R3 = LSW & 0b1100_1000 (LSW_new)
  xor	R9	# R0 = R0 ^ R9
  rxor	R0	# R0 = ^R0
  set	R6	# R6 = R0 (ones)

  # affected parity analysis: p2
  seti	0b0000_0100	# R0 = 0b0000_0100
  and	R3	# R0 = R0 & R3 (LSW) (parity_check)
  srl	2	# R0 = (parity_check >> 2)
  xor	R6	# R0 = parity_check = R0 ^ R6 = ones ^ parity_check
  sll	1	# R0 = (parity_check << 1)
  add	R10	# R0 = R0 + R10 = parity_affected + parity_check
  set	R10	# R10 = parity_affected = R0

  # p1 = ^(b11,b9,b7,b5,b4,b2,b1)
  luta	9	# R0 = LUT[9] = 0b1010_1010
  and	R4	# R0 = R0 & R4 = MSW & 0b1010_1010
  set	R9	# R9 = R0 (MSW_new)
  luta	8	# R0 = LUT[8] = 0b1010_1000
  and	R3	# R0 = R0 & R3 = LSW & 0b1010_1000 (LSW_new)
  xor	R9	# R0 = R0 ^ R9
  rxor	R0	# R0 = ^R0
  set	R6	# R6 = R0 (ones)

  # affected parity analysis: p1
  seti	0b0000_0010	# R0 = 0b0000_0010
  and	R3	# R0 = R0 & R3 (LSW) (parity_check)
  srl	1	# R0 = (parity_check >> 1)
  xor	R6	# R0 = parity_check = R0 ^ R6 = ones ^ parity_check
  add	R10	# R0 = R0 + R10 = parity_affected + parity_check
  set	R10	# R10 = parity_affected = R0

  # prepare b11:b1
  luta	12	# R0 = LUT[12] = 0b1110_0000
  and	R4	# R0 &= R4 (MSW)
  srl	5	# R0 >>= 5
  set	R9	# R9 = R0 (MSW_new)

  luta	13	# R0 = LUT[13] = 0b1110_1000
  and	R3	# R0 &= R3 (LSW)
  srl	3	# R0 >>= 3
  set	R8	# R8 = R0 (LSW_new)
  seti	1	# R0 = 1
  and	R8	# R0 = LSW_new & 1
  set	R11	# R11 = R0 (temp)
  la	R8	# R0 = R8
  srl	1	# R0 >>= 1
  add	R11	# R0 = R0 + R11
  set	R8	# R8 = LSW_new -> 0 0 0 0 b4 b3 b2 b1
  seti	0b0001_1110	# R0 = 0b0001_1110
  and	R4	# R0 = R0 & R4 = MSW & 0b0001_1110
  sll	3	# R0 <<= 3
  add	R8	# R0 = R0 + R8 -> b8 b7 b6 b5 b4 b3 b2 b1
  set	R8	# R8  = LSW_new -> b8 b7 b6 b5 b4 b3 b2 b1

  # deal with one_error_sign
  luta	18	# R0 = LUT[18] = address of loop_one_error
  set	R5	# R5 = R0
  seti	1	# R0 = 1
  eq	R7	# R0 = (R7 == R0) = (one_error_sign == 1)
  br	R5	# one_error_sign == 1

  # 0 or 2 errors
  eq	R10	# R0 = (R0 == R10) = (parity_affected == 0)
  set	R11	# R11 = parity_affected == 0 (temp)
  seti	1	# R0 = 1
  xor	R11	# R0 ^= R11 = parity_affected != 0
  sll	7	# R0 = 0b0000_0000 if 0 error, 0b1000_0000 if 2 errors
  add	R9	# R0 += R9 (MSW_new)
  set	R9	# R9 = R0
  luta	23	# R0 = LUT[23] = address of loop_end
  j	R0

loop_one_error:
  luta	4	# R0 = LUT[4] = 0b0100_0000
  add	R9	# R0 += R9 (MSW_new)
  set	R9	# R9 = R0
    
  luta	19	# R0 = LUT[19] = address of loop_error_b1
  set	R5	# R5 = R0
	seti	0b0000_0011	# R0 = 0b0000_0011
	eq	R10	# R0 = (R0 == R10) = (parity_affected == 0b0000_0011)
  br	R5	# R0 = 1, b1 error

  luta	20	# R0 = LUT[20] = address of loop_error_b234
  set	R5	# R5 = R0
  seti	0b0000_1000	# R0 = 0b0000_1000
  set	R11	# R11 = R0 (temp)
  la	R10	# R0 = R10 = parity_affected
  slt	R11	# R0 = R10 < R11 (b2, b3, or b4 error)
  br	R5	# R0 = 1, b2, b3, or b4 error

  luta	21	# R0 = LUT[21] = address of loop_error_b5678
  set	R5	# R5 = R0
  seti	0b0000_1101	# R0 = 0b0000_1101
  set	R11	# R11 = R0 (temp)
  la	R10	# R0 = R10 = parity_affected
  slt	R11	# R0 = R10 < R11 (b5-8 error)
  br	R5	# R0 = 1, b5-8 error

  # Else: b9-11 error
  seti	0b0000_1101	# R0 = 0b0000_1101
  set	R11	# R11 = R0 (temp)
  la	R10	# R0 = R10 = parity_affected
  sub	R11	# R0 = R10 – R11 (shift left)
  set	R11	# R11 = R0 (temp)
  seti	1	# R0 = 0b0000_0001
  slr	R11	# R0 = 0b0000_0001 << R11
  xor	R9	# R0 ^= R9 (MSW_new)
  set	R9	# R9 = R0
  luta	23	# R0 = LUT[23] = address of loop_end
  j	R0

loop_error_b1:
  seti	0b0000_0011	# R0 = 0b0000_0011
  set	R11	# R11 = R0 (temp)
  luta	22	# R0 = LUT[22] = address of loop_error_LSW
  j	R0

loop_error_b234:
  seti	0b0000_0100	# R0 = 0b0000_0100
  set	R11	# R11 = R0 (temp)
  luta	22	# R0 = LUT[22] = address of loop_error_LSW
  j	R0

loop_error_b5678:
  seti	0b0000_0101	# R0 = 0b0000_0101
  set	R11	# R11 = R0 (temp)

loop_error_LSW:
  la	R10	# R0 = R10 = parity_affected
  sub	R11	# R0 = R10 – R11 (bit shift left)
  set	R11	# R11 = R0 (temp)
  seti	1	# R0 = 0b0000_0001
  slr	R11	# R0 = 0b0000_0001 << R11
  xor	R8	# R0 ^= R8 (LSW_new)
  set	R8	# R8 = R0

loop_end:
  la	R1	# R0 = R1 = index
  subi	30	# R0 = index - 30
  set	R11	# R11 = R0 = index - 30
  la	R8	# R0 = R8 = LSW_new
  sw	R11	# mem[R11] = R0, mem[index - 30] = LSW_new
    
  la	R1	# R0 = R1 = index
  subi	29	# R0 = index - 29
  set	R11	# R11 = R0 = index - 29
  la	R9	# R0 = R9 = MSW_new
  sw	R11	# mem[R11] = R0, mem[index - 29] = MSW_new
	
  seti	2	# R0 = 2
  add	R1	# R0 = R0 + R1 = index + 2
  set	R1	# R1 = index = index + 2

  luta	17	# R0 = LUT[17] = address of loop_start
  set	R5	# R5 = R0

  la	R1	# R0 = R1
  slt	R2	# R0 = (R1 < 60)
  br	R5	# Iterate from the start
  halt		# Otherwise, terminate the program
